import { v4 as uuidv4 } from 'uuid';

(function($) {

    var defaults = {
        'contextMenu': '',
        'songPartTitleInput': '.song-part-title .song-part-name',
        'songPartModulationInfo': '.song-part-modulation-info',
        'fontHeight': 5,
        'fontWidth': 5,
        'sequences': [],
        'key': '',
        'scale': '',
        'mainScale': '',
        'songModulation': 0,
        'modulation': 0
    }

    /**
     * Get option value
     * @param {Object} object
     * @param {String} key
     */
    function getOption(object, key) {
        var options = $(object).data('songPart-options');

        if (options == undefined || !options.hasOwnProperty(key)) return null;

        return options[key];
    }

    /**
     * Set option value
     * @param {Object} obj
     * @param {String} option
     * @param {any} value
     */
    function setOption(obj, option, value) {
        var options = $(obj).data('songPart-options');
        options[option] = value;
        $(obj).data('songPart-options', options);
    }

    /**
     * Modulate the song part
     * @param {object} obj
     * @param {number} amount Amount of modulation
     */
    function modulate(obj, panel, amount) {
        $(panel).attr('data-modulation', amount);
        setModulationInfo(obj);
    }

    /**
     * Change the song part to a new scale
     * @param {object} obj
     * @param {number} scale New scale
     */
    function changeScale(obj, panel, scale) {
        $(panel).attr('data-scale', scale);
        // If no chords yet, change scale of the line as well
        $(panel).find('.chords').each(function() {
            if ($(this).children('.chord').length <= 0) {
                $(this).chordsLine('changeScale', scale);
            }
        });
        setModulationInfo(obj, panel);
    }

    function setModulationInfo(obj, panel) {
        // Get the song's modulation
        var songModulation = getOption(obj, 'songModulation');
        songModulation = typeof songModulation == 'function' ? songModulation() : songModulation;

        // Get this song part's modulation
        var modulation = $(panel).attr('data-modulation') || 0;
        var scale  = $(panel).attr('data-scale');

        // Get the main key and the main scale of the song
        var mainKey = getOption(obj, 'key');
        var mainScale =  getOption(obj, 'mainScale');
        mainKey = typeof mainKey == 'function'  ? mainKey() : mainKey;
        mainScale = typeof mainScale == 'function'  ? mainScale() : mainScale;

        // Hide the modulation info if no key change or difference to scale in relation to the song's scale
        if (modulation == 0 && scale == mainScale) {
            $(panel).find(getOption(obj, 'songPartModulationInfo')).hide();
        } else {
            var display = window.ChordProcessor.processChord('no/1/M//', mainKey, scale, modulation + songModulation*1);
            $(panel).find(getOption(obj, 'songPartModulationInfo')).show().children('span').html('Key of ' + display + (scale != 'major' ? ' ' + scale : ''));
        }

        // set modulation info of lines
        $(obj).find('.chords').each(function() {
            $(this).chordsLine('update');
        })
    }

    /**
     * Fill song part container with values
     * @param {object} obj
     * @param {object} values collection of song parts
     */
    function fillSongparts(obj, values) {
        // Remove autogenerated song parts
        $(obj).dynamicPanel('removeAll');
        // Iterate values song parts
        values.forEach(songPart => {
            var panel = $(obj).dynamicPanel('insert', null, songPart['id']);
            // Set ID
            panel.attr('data-id', songPart['id']);
            panel.attr('data-order', songPart['order']);
            panel.attr('data-scale', songPart['scale']);
            panel.attr('data-modulation', songPart['referenceKey']);
            if (songPart.hasOwnProperty('sequences') && Array.isArray(songPart['sequences'])) {
                var sequences = [];
                songPart['sequences'].forEach(part => {
                    sequences.push(part.name);
                });
                panel.attr('data-sequences', sequences.join('|'));
            }
            // Set song title
            if (songPart['name'] != '' && songPart['name'] != null) {
                panel.find(getOption(obj, 'songPartTitleInput')).html(songPart['name']);
                panel.find(getOption(obj, 'songPartTitleInput')).attr('data-name', songPart['name']);
            }
            // Get lyrics and chords string
            var lyrDisplay = songPart['lyrics']['display'];
            var lyrContent = songPart['lyrics']['content'];
            var chords = songPart['chords']['content'];
            // Parse lyrics and chords line
            var lyrDispArr = lyrDisplay != null ? lyrDisplay.split('{newline}') : [''];
            var lyrContArr = lyrContent != null ? lyrContent.split('{newline}') : [''];
            var chordsArr = chords != null ? chords.split('{newline}') : [];
            // Fill only if lyrics and chords have the same lines
            if (lyrDispArr.length == lyrContArr.length && lyrDispArr.length == chordsArr.length) {
                // Remove existing song lines first
                panel.find('.stanza').dynamicPanel('removeAll');
                for (var i = 0; i < lyrDispArr.length; i++) {
                    // Insert new song line
                    fillSongLine(panel, lyrDispArr[i], lyrContArr[i], chordsArr[i]);
                }
            }
            setModulationInfo(obj, panel);
        });
    }

    /**
     * Set lyrics and chords value to the song line
     * @param {object} panel Target panel to add lyrics to
     * @param {string} lyricsDisplay Lyrics display text
     * @param {string} lyricsContent Lyrics content text
     * @param {string} chordsContent Chords line value
     */
    function fillSongLine(panel, lyricsDisplay, lyricsContent, chordsContent) {
        // Create new song line panel
        var linePanel = panel.find('.stanza').dynamicPanel('insert');
        // Set value to lyrics input and set changed flag
        linePanel.find('.lyrics input[type="text"]').val(lyricsDisplay);
        linePanel.find('.lyrics input[type="text"]').addClass('changed');
        // Set content to lyrics view
        linePanel.find('.lyrics .lyrics-view').html(lyricsContent);
        // Set content to chords view
        linePanel.find('.chords').chordsLine('setValue', chordsContent);
    }

    function getSongParts(obj) {
        var songParts = [];
        $(obj).children('.panel-item').each(function() {
            // Get properties
            var id = $(this).attr('data-id');
            var name = $(this).find('.song-part-name').attr('data-name');
            var order = $(this).attr('data-order');
            var modulation = $(this).attr('data-modulation');
            var scale = $(this).attr('data-scale');
            // Get lyrics and chords
            var songPartChords = [];
            var songPartLyricsCont = [];
            var songPartLyricsDisp = [];
            $(this).find('.panel-item .song-line-content').each(function() {
                $(this).find('.lyrics-view').songLine('processLine');
                var chords = $(this).children('.chords').chordsLine('getValue') || '';
                var lyricsDisplay = $(this).find('.lyrics input[type="text"]').val() || '';
                var lyricsContent = $(this).find('.lyrics-view').songLine('getValue') || '';

                songPartChords.push(chords.join('|'));
                songPartLyricsCont.push(lyricsContent);
                songPartLyricsDisp.push(lyricsDisplay);
            });
            songParts.push({
                'referenceKey': modulation,
                'scale': scale,
                'id': id,
                'name': name,
                'order': order,
                'lyrics': {
                    'content': songPartLyricsCont.join('{newline}'),
                    'display': songPartLyricsDisp.join('{newline}')
                },
                'chords': {
                    'content': songPartChords.join('{newline}')
                }
            })
        });

        return songParts;
    }

    $.fn.songPart = function(command, option, value) {

        if (command == undefined || typeof command == 'object') {
            return $(this).each(function() {

                var self = this;
                var settings = $.extend({}, defaults, command);

                $(self).data('songPart-options', settings);

                // Activate dynamic panel for song parts
                $(self).dynamicPanel({
                    'key': 'songPart',
                    'panelTemplate': '.song-part-template',
                    // Draggable options
                    'draggable': {
                        'cancel': ['.chord-cursor', '.chord',  '.close', '.more', '.song-line', '.song-part-title' ]
                    },
                    'onInsert': function (event, panel) {

                        // More menu action of song panel
                        panel.find('.more').on('click', function(event) {
                            $(settings.contextMenu).contextMenu('toggle', this);
                        });

                        // Set font family and size based on settings
                        panel.css('font-size', settings.fontSize);
                        panel.css('font-family', settings.fontFamily);

                        // Insert below action of song panels
                        panel.find('.insert-below').on('click', function() {
                            var index = $(this).closest('.song-part').attr('data-order')*1;
                            $(self).dynamicPanel('insert', index);
                        });

                        // Set main scale as the song part's current scale
                        changeScale(self, panel, typeof settings.mainScale == 'function' ? settings.mainScale() : settings.mainScale);
                        modulate(self, panel, 0);

                        // Fold/Expand action of song part panel
                        $(panel).find('.fold, .expand').on('click', function() {
                            if ($(this).hasClass('fold')) {
                                $(this).siblings('.stanza-container').hide();
                                $(this).siblings('.expand').show();
                            } else {
                                $(this).siblings('.stanza-container').show();
                                $(this).siblings('.fold').show();
                            }
                            $(this).hide();
                        });
                        // Generate GUID and create id for stanza
                        var uuid = panel.attr('data-id');
                        if (uuid == undefined || uuid == '') {
                            uuid = uuidv4();
                            panel.attr('data-id', uuid);
                        }
                        var id = 'stanza'+ uuid.replace(/[{,},-]*/g, '');
                        // Activate dynamic panel for song lines
                        panel.find('.stanza').attr('id', id).dynamicPanel({
                            'key': 'stanza',
                            'panelTemplate': '.content-prototype',
                            'removerSelector': '.delete-line',
                            'autoformatPaste': true,
                            // Draggable options
                            'draggable': {
                                'cancel': ['.chord-cursor', '.chord',  '.close', '.more', '.lyrics' ]
                            },
                            'onInsert': function (innerEv, songlinePanel) {
                                // Generate GUID and create id for song line
                                var uuid = uuidv4();
                                var lineId = 'line'+ uuid.replace(/[{,},-]*/g, '');
                                songlinePanel.attr('data-id', uuid);
                                songlinePanel.attr('id', lineId);
                                // Set up context menu
                                songlinePanel.find('.line-options').on('click', function() {
                                    $('.songline-context-menu').contextMenu('toggle', this);
                                });
                                // Set up change listener for input texts
                                songlinePanel.find('.lyrics input[type="text"]').on('change', function() {
                                    $(this).addClass('changed');
                                });
                                // Set up lyrics line
                                // Get sibling view element
                                var lyricsView = songlinePanel.find('.lyrics-view');
                                if (lyricsView.length > 0) {
                                    lyricsView.songLine({
                                        'dataSource': songlinePanel.find('.lyrics input[type="text"]'),
                                        'contextMenu': '.character-context-menu',
                                        'spacerContextMenu': '.spacer-context-menu'
                                    });
                                    // hide chords view initially when not on chords mode
                                    if ($('#processing').val() != 'lyrics') {
                                        songlinePanel.find('.lyrics input[type="text"]').hide();
                                    }
                                }
                                // Set up chords line
                                var chordsView = songlinePanel.find('.chords');
                                if (chordsView.length > 0) {
                                    // Initialize chords line
                                    chordsView.chordsLine({
                                        'height': settings.fontHeight + 4,
                                        'cursorWidth': settings.fontWidth,
                                        'key': settings.key,
                                        'mainScale': settings.mainScale, // function to get the song's main scale
                                        'songPartScale': function() { return panel.attr('data-scale') },
                                        'songModulation': getOption(self, 'songModulation'),
                                        'songPartModulation': function() { return panel.attr('data-modulation') != undefined ? panel.attr('data-modulation') : 0 }
                                    });
                                }
                                // hide chords view initially when not on chords mode
                                if ($('#processing').val() != 'chords') {
                                    chordsView.hide();
                                } else {
                                    chordsView.show();
                                }
                            }
                        });
                        // Set add stanza button target
                        panel.find('.add-stanza').attr('data-target', '#'+id);
                        // Set up song part title
                        panel.find('.song-part-title .song-part-name').on('click', function() {
                            $('.song-part-title-expanded-panel').contextMenu('show', this);
                        })
                    }
                });
            });
        }

        if (typeof command == 'string') {
            switch (command.toLocaleLowerCase()) {
                case 'option':
                    if (typeof option != 'string') return;
                    return getOption(this, option);
                case 'setvalues':
                    return $(this).each(function() {
                        if (typeof option != 'object') return; // Not array
                        fillSongparts(this, option);
                    });
                case 'getvalues':
                    return getSongParts(this);
                case 'modulate':
                    if (typeof value != 'number') return; // NaN
                    return $(this).each(function() {
                        modulate(this, option, value);
                    });
                case 'changescale':
                    return $(this).each(function() {
                        changeScale(this, option, value);
                    });
                case 'update':
                    return $(this).each(function() {
                        var self = this;
                        $(this).find('.song-part').each(function() {
                            setModulationInfo(self, this);
                        })
                    });
            }
        }
    }

})(jQuery);
