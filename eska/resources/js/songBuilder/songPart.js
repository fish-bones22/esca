import { v4 as uuidv4 } from 'uuid';

(function($) {

    var defaults = {
        'contextMenu': '',
        'songPartTitleInput': '.song-part-title .song-part-name',
        'fontHeight': 5,
        'fontWidth': 5,
        'sequences': []
    }

    /**
     * Get option value
     * @param {Object} object
     * @param {String} key
     */
    function getOption(object, key) {
        var options = $(object).data('songPart-options');

        if (options == undefined || !options.hasOwnProperty(key)) return null;

        return options[key];
    }

    /**
     * Set option value
     * @param {Object} obj
     * @param {String} option
     * @param {any} value
     */
    function setOption(obj, option, value) {
        var options = $(obj).data('songPart-options');
        options[option] = value;
        $(obj).data('songPart-options', options);
    }

    /**
     * Fill song part container with values
     * @param {object} obj
     * @param {object} values collection of song parts
     */
    function fillSongparts(obj, values) {
        // Remove autogenerated song parts
        $(obj).dynamicPanel('removeAll');
        // Iterate values song parts
        values.forEach(songPart => {
            var panel = $(obj).dynamicPanel('insert', null, songPart['id']);
            // Set ID
            panel.attr('data-id', songPart['id']);
            panel.attr('data-order', songPart['order']);
            panel.attr('data-reference-key', songPart['referenceKey']);
            if (songPart.hasOwnProperty('sequences') && Array.isArray(songPart['sequences'])) {
                var sequences = [];
                songPart['sequences'].forEach(part => {
                    sequences.push(part.name);
                });
                panel.attr('data-sequences', sequences.join('|'));
            }
            // Set song title
            if (songPart['name'] != '' && songPart['name'] != null) {
                panel.find(getOption(obj, 'songPartTitleInput')).html(songPart['name']);
                panel.find(getOption(obj, 'songPartTitleInput')).attr('data-name', songPart['name']);
            }
            // Get lyrics and chords string
            var lyrDisplay = songPart['lyrics']['display'];
            var lyrContent = songPart['lyrics']['content'];
            var chords = songPart['chords']['content'];
            // Parse lyrics and chords line
            var lyrDispArr = lyrDisplay.split('{newline}');
            var lyrContArr = lyrContent.split('{newline}');
            var chordsArr = chords.split('{newline}');
            // Fill only if lyrics and chords have the same lines
            if (lyrDispArr.length == lyrContArr.length && lyrDispArr.length == chordsArr.length) {
                // Remove existing song lines first
                panel.find('.stanza').dynamicPanel('removeAll');
                for (var i = 0; i < lyrDispArr.length; i++) {
                    // Insert new song line
                    fillSongLine(panel, lyrDispArr[i], lyrContArr[i], chordsArr[i]);
                }
            }
        });
    }

    /**
     * Set lyrics and chords value to the song line
     * @param {object} panel Target panel to add lyrics to
     * @param {string} lyricsDisplay Lyrics display text
     * @param {string} lyricsContent Lyrics content text
     * @param {string} chordsContent Chords line value
     */
    function fillSongLine(panel, lyricsDisplay, lyricsContent, chordsContent) {
        // Create new song line panel
        var linePanel = panel.find('.stanza').dynamicPanel('insert');
        // Set value to lyrics input and set changed flag
        linePanel.find('.lyrics input[type="text"]').val(lyricsDisplay);
        linePanel.find('.lyrics input[type="text"]').addClass('changed');
        // Set content to lyrics view
        linePanel.find('.lyrics .lyrics-view').html(lyricsContent);
        // Set content to chords view
        linePanel.find('.chords').chordsLine('setValue', chordsContent);
    }

    function getSongParts(obj) {
        var songParts = [];
        $(obj).children('.panel-item').each(function() {
            // Get properties
            var id = $(this).attr('data-id');
            var name = $(this).find('.song-part-name').attr('data-name');
            var order = $(this).attr('data-order');
            // Get lyrics and chords
            var songPartChords = [];
            var songPartLyricsCont = [];
            var songPartLyricsDisp = [];
            $(this).find('.panel-item .song-line-content').each(function() {
                $(this).find('.lyrics-view').songLine('processLine');
                var chords = $(this).children('.chords').chordsLine('getValue');
                var lyricsDisplay = $(this).find('.lyrics input[type="text"]').val();
                var lyricsContent = $(this).find('.lyrics-view').songLine('getValue');

                songPartChords.push(chords.join('|'));
                songPartLyricsCont.push(lyricsContent);
                songPartLyricsDisp.push(lyricsDisplay);
            });

            songParts.push({
                'referenceKey': 0,
                'id': id,
                'name': name,
                'order': order,
                'lyrics': {
                    'content': songPartLyricsCont.join('{newline}'),
                    'display': songPartLyricsDisp.join('{newline}')
                },
                'chords': {
                    'content': songPartChords.join('{newline}')
                }
            })
        });

        return songParts;
    }

    $.fn.songPart = function(command, option, value) {

        if (command == undefined || typeof command == 'object') {
            return $(this).each(function() {

                var self = this;
                var settings = $.extend({}, defaults, command);

                $(self).data('songPart-options', settings);

                // Activate dynamic panel for song parts
                $(self).dynamicPanel({
                    'key': 'songPart',
                    'panelTemplate': '.song-part-template',
                    // Draggable options
                    'draggable': {
                        'cancel': ['.chord-cursor', '.chord',  '.close', '.more', '.song-line', '.song-part-title' ]
                    },
                    'onInsert': function (event, panel) {

                        // More menu action of song panel
                        panel.find('.more').on('click', function(event) {
                            $(settings.contextMenu).contextMenu('toggle', this);
                        });

                        // Set font family and size based on settings
                        panel.css('font-size', settings.fontSize);
                        panel.css('font-family', settings.fontFamily);

                        // Insert below action of song panels
                        panel.find('.insert-below').on('click', function() {
                            var index = $(this).closest('.song-part').attr('data-order')*1;
                            $(self).dynamicPanel('insert', index);
                        });

                        // Fold/Expand action of song part panel
                        $(panel).find('.fold, .expand').on('click', function() {
                            if ($(this).hasClass('fold')) {
                                $(this).siblings('.stanza-container').hide();
                                $(this).siblings('.expand').show();
                            } else {
                                $(this).siblings('.stanza-container').show();
                                $(this).siblings('.fold').show();
                            }
                            $(this).hide();
                        });
                        // Generate GUID and create id for stanza
                        var uuid = panel.attr('data-id');
                        if (uuid == undefined || uuid == '') {
                            uuid = uuidv4();
                            panel.attr('data-id', uuid);
                        }
                        var id = 'stanza'+ uuid.replace(/[{,},-]*/g, '');
                        // Activate dynamic panel for song lines
                        panel.find('.stanza').attr('id', id).dynamicPanel({
                            'key': 'stanza',
                            'panelTemplate': '.content-prototype',
                            'removerSelector': '.delete-line',
                            'autoformatPaste': true,
                            // Draggable options
                            'draggable': {
                                'cancel': ['.chord-cursor', '.chord',  '.close', '.more', '.lyrics' ]
                            },
                            'onInsert': function (innerEv, songlinePanel) {
                                // Generate GUID and create id for song line
                                var uuid = uuidv4();
                                var lineId = 'line'+ uuid.replace(/[{,},-]*/g, '');
                                songlinePanel.attr('data-id', uuid);
                                songlinePanel.attr('id', lineId);
                                // Set up context menu
                                songlinePanel.find('.line-options').on('click', function() {
                                    $('.songline-context-menu').contextMenu('toggle', this);
                                });
                                // Set up change listener for input texts
                                songlinePanel.find('.lyrics input[type="text"]').on('change', function() {
                                    $(this).addClass('changed');
                                });
                                // Set up lyrics line
                                // Get sibling view element
                                var lyricsView = songlinePanel.find('.lyrics-view');
                                if (lyricsView.length > 0) {
                                    lyricsView.songLine({
                                        'dataSource': songlinePanel.find('.lyrics input[type="text"]'),
                                        'contextMenu': '.character-context-menu',
                                        'spacerContextMenu': '.spacer-context-menu'
                                    });
                                }
                                // Set up chords line
                                var chordsView = songlinePanel.find('.chords');
                                if (chordsView.length > 0) {
                                    // Initialize chords line
                                    chordsView.chordsLine({
                                        'height': settings.fontHeight + 4,
                                        'cursorWidth': settings.fontWidth
                                    });
                                }
                                // hide chords view initially when not on chords mode
                                if ($('#processing').val() != 'chords') {
                                    chordsView.hide();
                                }
                            }
                        });
                        // Set add stanza button target
                        panel.find('.add-stanza').attr('data-target', '#'+id);
                        // Set up song part title
                        panel.find('.song-part-title .song-part-name').on('click', function() {
                            $('.song-part-title-expanded-panel').contextMenu('show', this);
                        })
                    }
                });
            });
        }

        if (typeof command == 'string') {
            switch (command.toLocaleLowerCase()) {
                case 'option':
                    if (typeof option != 'string') return;
                    return getOption(this, option);
                case 'setvalues':
                    return $(this).each(function() {
                        if (typeof option != 'object') return; // Not array
                        fillSongparts(this, option);
                    });

                case 'getvalues':
                    return getSongParts(this);
            }
        }
    }

})(jQuery);
